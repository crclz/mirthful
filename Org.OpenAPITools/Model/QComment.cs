/* 
 * TheAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QComment
    /// </summary>
    [DataContract]
    public partial class QComment :  IEquatable<QComment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QComment" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="senderId">senderId.</param>
        /// <param name="workId">workId.</param>
        /// <param name="title">title.</param>
        /// <param name="text">text.</param>
        /// <param name="rating">rating.</param>
        /// <param name="agreeCount">agreeCount.</param>
        /// <param name="disagreeCount">disagreeCount.</param>
        /// <param name="user">user.</param>
        /// <param name="myAttitude">myAttitude.</param>
        public QComment(Guid id = default(Guid), long createdAt = default(long), long updatedAt = default(long), Guid senderId = default(Guid), Guid workId = default(Guid), string title = default(string), string text = default(string), int rating = default(int), int agreeCount = default(int), int disagreeCount = default(int), QUser user = default(QUser), bool? myAttitude = default(bool?))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.SenderId = senderId;
            this.WorkId = workId;
            this.Title = title;
            this.Text = text;
            this.Rating = rating;
            this.AgreeCount = agreeCount;
            this.DisagreeCount = disagreeCount;
            this.User = user;
            this.MyAttitude = myAttitude;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets SenderId
        /// </summary>
        [DataMember(Name="senderId", EmitDefaultValue=false)]
        public Guid SenderId { get; set; }

        /// <summary>
        /// Gets or Sets WorkId
        /// </summary>
        [DataMember(Name="workId", EmitDefaultValue=false)]
        public Guid WorkId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public int Rating { get; set; }

        /// <summary>
        /// Gets or Sets AgreeCount
        /// </summary>
        [DataMember(Name="agreeCount", EmitDefaultValue=false)]
        public int AgreeCount { get; set; }

        /// <summary>
        /// Gets or Sets DisagreeCount
        /// </summary>
        [DataMember(Name="disagreeCount", EmitDefaultValue=false)]
        public int DisagreeCount { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public QUser User { get; set; }

        /// <summary>
        /// Gets or Sets MyAttitude
        /// </summary>
        [DataMember(Name="myAttitude", EmitDefaultValue=true)]
        public bool? MyAttitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QComment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  WorkId: ").Append(WorkId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  AgreeCount: ").Append(AgreeCount).Append("\n");
            sb.Append("  DisagreeCount: ").Append(DisagreeCount).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  MyAttitude: ").Append(MyAttitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QComment);
        }

        /// <summary>
        /// Returns true if QComment instances are equal
        /// </summary>
        /// <param name="input">Instance of QComment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QComment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    this.UpdatedAt.Equals(input.UpdatedAt)
                ) && 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.WorkId == input.WorkId ||
                    (this.WorkId != null &&
                    this.WorkId.Equals(input.WorkId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Rating == input.Rating ||
                    this.Rating.Equals(input.Rating)
                ) && 
                (
                    this.AgreeCount == input.AgreeCount ||
                    this.AgreeCount.Equals(input.AgreeCount)
                ) && 
                (
                    this.DisagreeCount == input.DisagreeCount ||
                    this.DisagreeCount.Equals(input.DisagreeCount)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.MyAttitude == input.MyAttitude ||
                    (this.MyAttitude != null &&
                    this.MyAttitude.Equals(input.MyAttitude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.SenderId != null)
                    hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.WorkId != null)
                    hashCode = hashCode * 59 + this.WorkId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.Rating.GetHashCode();
                hashCode = hashCode * 59 + this.AgreeCount.GetHashCode();
                hashCode = hashCode * 59 + this.DisagreeCount.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.MyAttitude != null)
                    hashCode = hashCode * 59 + this.MyAttitude.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
